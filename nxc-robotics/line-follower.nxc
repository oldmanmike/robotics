// Averages n readings together into a single reading
int avgReading(byte port, int n) {
  int i;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;
  string debugStr;
  string debugMsg;

  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorRaw(port);
    newReading = reading + oldReading;
  }
  return(newReading/n);
}


task main() {
  // Variables for sensor readings and other things
  int x;
  int rightReading;
  int leftReading;
  int compassReading;
  long rightRotation;
  long leftRotation;
  long tick = 0;
  long counter = 0;
  long previousTurnTime = 0;
  int actuallyWritten;
  long initialTick = 0;

  // conditional variables for keeping track of
  bool keepGoing = true;
  bool shouldStop = false;
  bool shouldTurn = false;
  bool shouldBeCareful = false;
  long timeSinceLastTurn = 0;

  // variables for file handling
  byte handle;
  unsigned int result = 0;

  /////////////////////////////////////////////////////////////////////////////
  // Strings for debug output
  /////////////////////////////////////////////////////////////////////////////
  string rightStr;
  string leftStr;
  string tickStr;
  string compassStr;
  string rightRotationStr;
  string leftRotationStr;
  string timeSinceLastTurnStr;

  string rightMsg;
  string leftMsg;
  string tickMsg;
  string compassMsg;
  string rightRotationMsg;
  string leftRotationMsg;
  string timeSinceLastTurnMsg;
  string msg;

  /////////////////////////////////////////////////////////////////////////////

  // Configure sensors
  SetSensorType(IN_1, IN_TYPE_LIGHT_ACTIVE);
  SetSensorMode(IN_1, IN_MODE_RAW);

  SetSensorType(IN_2, IN_TYPE_LIGHT_ACTIVE);
  SetSensorMode(IN_2, IN_MODE_RAW);

  SetSensorLowspeed(S3);

  // Initial wait for all sensors to come online
  Wait(600);

  // Create file for logging data entries to
  result = CreateFile("line.csv", 8192, handle);
  result = WriteLnString(handle, "Time (s),Compass,Left Rotations, Right Rotations", actuallyWritten);
  
  initialTick = CurrentTick();

  while (keepGoing == true) {
    // Take readings from all sensors for this iteration
    rightReading = avgReading(IN_1, 1);
    leftReading = avgReading(IN_2, 1);
    tick = CurrentTick();
    rightRotation = MotorRotationCount(OUT_A);
    leftRotation = MotorRotationCount(OUT_B);
    compassReading = SensorHTCompass(S3);

    // calculate conditional variables
    counter = (tick - initialTick) / 1000;
    shouldStop = ((leftReading < 500) || (rightReading < 500));
    shouldTurn = (abs(leftReading - rightReading) < 70) && (abs(leftReading - rightReading) > 15);
    timeSinceLastTurn = tick - previousTurnTime;
    shouldBeCareful = ((leftReading > 700) && (rightReading > 700));


    ///////////////////////////////////////////////////////////////////////////
    // Strings for debug output
    ///////////////////////////////////////////////////////////////////////////
    rightStr = NumToStr(rightReading);
    leftStr = NumToStr(leftReading);
    tickStr = NumToStr(counter);
    compassStr = NumToStr(compassReading);
    rightRotationStr = NumToStr(rightRotation);
    leftRotationStr = NumToStr(leftRotation);
    timeSinceLastTurnStr = NumToStr(timeSinceLastTurn);


    rightMsg = "R Sensor: " + rightStr;
    leftMsg = "L Sensor: " + leftStr;
    tickMsg = "Time: " + tickStr;
    compassMsg = "Compass: " + compassStr;
    rightRotationMsg = "R Rotations: " + rightRotationStr;
    leftRotationMsg = "L Rotations: " + leftRotationStr;
    timeSinceLastTurnMsg = "Last Turn: " + timeSinceLastTurnStr;


    TextOut(0, LCD_LINE1, rightMsg);
    TextOut(0, LCD_LINE2, leftMsg);
    TextOut(0, LCD_LINE3, tickMsg);
    TextOut(0, LCD_LINE4, compassMsg);
    TextOut(0, LCD_LINE5, rightRotationMsg);
    TextOut(0, LCD_LINE6, leftRotationMsg);
    TextOut(0, LCD_LINE7, timeSinceLastTurnMsg);
    
    // Log entry for all readings this iteration to disk
    msg = tickStr + "," + compassStr + "," + leftRotationStr + "," + rightRotationStr;
    result = WriteLnString(handle, msg, actuallyWritten);

    ///////////////////////////////////////////////////////////////////////////


    // Have we hit the finish line?
    if (shouldStop || shouldBeCareful) {
      OnFwd(OUT_AB, (-100));
      Off(OUT_AB);
      keepGoing = false;
      result = CloseFile(handle);
    } else {
      keepGoing = true;
    }

    if (shouldTurn) {
      // If we've turned recently, we should turn more than previously
      if (timeSinceLastTurn < 15000) {
        if (leftReading < rightReading) {
          previousTurnTime = CurrentTick();
          OnFwd(OUT_A, 65);
          OnFwd(OUT_B, 20);
        } else {
          previousTurnTime = CurrentTick();
          OnFwd(OUT_A, 20);
          OnFwd(OUT_B, 65);
        }
      } else {
        if (leftReading < rightReading) {
          previousTurnTime = CurrentTick();
          OnFwd(OUT_A, 60);
          OnFwd(OUT_B, (-50));
        } else {
          previousTurnTime = CurrentTick();
          OnFwd(OUT_A, (-50));
          OnFwd(OUT_B, 60);
        }
      }
    } else {
      x = previousTurnTime; // note this time as the last time we turned
      OnFwd(OUT_AB, 70);
    }
  }
}
