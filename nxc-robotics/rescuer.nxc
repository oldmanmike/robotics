/* TODO
 * ====
 * Implement Rule: Move forward, adjusting for compass.
 * Implement Rule: If unaligned with wall in the short-term, turn to realign.
 * Implement Rule: If unaligned with wall in the long-term, turn to realign.
 * Implement Rule: If object up ahead < 20cm away, turn until back sensor is parallel with it.
 * Implement Rule: If front sensor suddenly loses object, continue until back loses object, then turn 90 degrees.
 * Implement Rule: If all sensors cannot detect any objects, continue for 5 seconds, then stop.
 */

int smoothUltraReading(byte port, int n) {
  int i;
  int avg;
  int reading = 0;
  int maxReading = 0;
  int minReading = 0;
  int oldReading = 0;
  int newReading = 0;

  int collection[];
  ArrayInit(collection, 0, n);

  for (i = 0; i < n; i++) {
    collection[i] = SensorUS(port);
    if (collection[i] > maxReading) {
      maxReading = collection[i];
    }
    if (collection[i] < minReading) {
      minReading = collection[i];
    }
    newReading = oldReading + collection[i];
    oldReading = collection[i];
  }
  
  avg = newReading / n;

  //if (abs(avg - maxReading) || abs(avg - minReading)) {
    
  //}

  return (avg);
}


///////////////////////////////////////////////////////////////////////////////
// Composite Events
///////////////////////////////////////////////////////////////////////////////

bool eventFrontBackObjectUnalignedSudden (int now, int frontHistory[], int backHistory[]) {
  if (abs(frontHistory[now] - backHistory[now]) > 2) {
    return true;
  } else {
    return false;
  }
}

bool eventFrontBackObjectUnalignedGradual (int now, int frontHistory[], int backHistory[]) {
  return false;
}

///////////////////////////////////////////////////////////////////////////////
// Core Events
///////////////////////////////////////////////////////////////////////////////

bool isUltraObjectFound (int now, int history[], int range) {
  if (history[now] < range) {
    return true;
  } else {
    return false;
  }
}

bool isUltraObjectLost (int now, int ultraHistory[], int foreground, int background) {
  if (ultraHistory[now] > background) {
    return true;
  } else {
    return false;
  }
}

bool isUltraObjectGainingSudden (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectGradualGaining (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectSuddenLosing (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectGradualLosing (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

void turnRightWithCompass(byte port, int magnitude) {
  ClearScreen();
  int current = 0;
  int target = 0;
  current = smoothUltraReading(port, 1);
  if (((current + magnitude) >= 180) || ((current + magnitude) <= 0)) {
    if ((current + magnitude) >= 180) {
      target = current + magnitude - 180;
    } else {
      target = current + magnitude + 180;
    }
  } else {
    target = current + magnitude;
  }
  TextOut(0,LCD_LINE1, NumToStr(current));
  TextOut(0,LCD_LINE2, NumToStr(target));
  while (abs(target - current) > 7) {
    RotateMotorEx(OUT_AB, 30, 10, (100), true, true);
    current = smoothUltraReading(port, 1);
    ClearLine(LCD_LINE3);
    TextOut(0, LCD_LINE3, NumToStr(current));
  }
  Off(OUT_AB);
}

void turnLeftWithCompass(byte port, int magnitude) {
  ClearScreen();
  int current = 0;
  int target = 0;
  current = smoothUltraReading(port, 1);
  if (((current + magnitude) >= 180) || ((current + magnitude) <= 0)) {
    if ((current + magnitude) >= 180) {
      target = current + magnitude - 180;
    } else {
      target = current + magnitude + 180;
    }
  } else {
    target = current + magnitude;
  }
  TextOut(0,LCD_LINE1, NumToStr(current));
  TextOut(0,LCD_LINE2, NumToStr(target));
  while (abs(target - current) > 7) {
    RotateMotorEx(OUT_AB, (-30), 10, (-100), true, true);
    current = smoothUltraReading(port, 1);
    ClearLine(LCD_LINE3);
    TextOut(0, LCD_LINE3, NumToStr(current));
  }
  Off(OUT_AB);
}

// Averages n ultra sensor readings together into a single reading
int avgUltraReading(byte port, int n) {
  int i = 0;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;
  
  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorUS(port);
    newReading = reading + oldReading;
  }
  return(newReading/n);
}

task main() {
  // State Variables
  long rightRotation;
  long leftRotation;
  long tick;

  // Reading Variables
  int frontUltraReading;
  int backUltraReading;
  int forwardUltraReading;
  int compassReading;
  
  // variables for file handling
  byte handle;
  unsigned int result = 0;
  int actuallyWritten;

  // Debug info variables
  string forwardStr;
  string frontStr;
  string backStr;
  string compassStr;
  string tickStr;
  string rRotationStr;
  string lRotationStr;

  string forwardMsg;
  string frontMsg;
  string backMsg;
  string compassMsg;

  string msg;

  // Configure sensors
  SetSensorLowspeed(IN_1); //Forward UltraSonic
  SetSensorMode(IN_1, IN_MODE_RAW);

  SetSensorLowspeed(IN_2); //font UltraSonic
  SetSensorMode(IN_2, IN_MODE_RAW);

  SetSensorLowspeed(IN_3); //back UltraSonic 
  SetSensorMode(IN_3, IN_MODE_RAW);
  
  SetSensorLowspeed(IN_4); //Compass


  ResetTachoCount(OUT_AB);
  ResetRotationCount(OUT_AB);

  // Initial wait for all sensors to come online
  Wait(1000);

  result = CreateFile("wall.csv", 8192, handle);
  result = WriteLnString(handle, "Tick,Compass,Forward Ultrasonic,Front UltraSonic,Back UltraSonic,Left Rotations,Right Rotations", actuallyWritten);
  
  int forwardHistory[];
  int frontHistory[];
  int backHistory[];
  int compassHistory[];


  while (true) {
    
    int i;
    int size = 20;
    ArrayInit(forwardHistory, 0, size);
    ArrayInit(frontHistory, 0, size);
    ArrayInit(backHistory, 0, size);
    ArrayInit(compassHistory, 0, size);
    
    //////////////////////////////////////////////
    // Debug Info for this iteration
    //////////////////////////////////////////////

    Wait(1000);

    for (i = 0; i < size; i++) {
      
      forwardUltraReading = 0;
      forwardUltraReading = avgUltraReading(IN_1, 1);
      forwardHistory[i] = forwardUltraReading;
      forwardStr = NumToStr(forwardUltraReading);
      forwardMsg = "Forward: " + forwardStr;
      ClearLine(LCD_LINE1);
      TextOut(0, LCD_LINE1, forwardMsg);
     
      frontUltraReading = 0;
      frontUltraReading = smoothUltraReading(IN_2, 1);
      frontHistory[i] = frontUltraReading;
      frontStr = NumToStr(frontUltraReading);
      frontMsg = "Front: " + frontStr;
      ClearLine(LCD_LINE2);
      TextOut(0, LCD_LINE2, frontMsg);

      backUltraReading = 0;
      backUltraReading = smoothUltraReading(IN_3, 1);
      backHistory[i] = backUltraReading;
      backStr = NumToStr(backUltraReading);
      backMsg = "Back: " + backStr;
      ClearLine(LCD_LINE3);
      TextOut(0, LCD_LINE3, backMsg);

      compassReading = 0;
      compassReading = smoothUltraReading(IN_4, 1);
      compassHistory[i] = compassReading;
      compassStr = NumToStr(compassReading);
      compassMsg = "Compass: " + compassStr;
      ClearLine(LCD_LINE5);
      TextOut(0, LCD_LINE5, compassMsg);

      tick = CurrentTick();
      tickStr = NumToStr(tick);

      rightRotation = MotorRotationCount(OUT_A);
      rRotationStr = NumToStr(rightRotation);

      leftRotation = MotorRotationCount(OUT_B);
      lRotationStr = NumToStr(leftRotation);

      // Create a new entry for writing to disk
      msg = tickStr + "," + compassStr + "," + forwardStr + "," + frontStr + "," + backStr + "," + lRotationStr + ", " + rRotationStr;
      result = WriteLnString(handle, msg, actuallyWritten);

      ////////////////////////////////////////////
      //estimatedDistance = ((rightRotation + leftRotation) / 4000);
       
      if (isUltraObjectFound(i,forwardHistory,20)) {
        turnLeftWithCompass(IN_4, (-50));
      }
      /* 
      if (!(isUltraObjectFound(i,frontHistory,30))) {
        OnFwdSync(OUT_AB, 50, (-1));
        Wait(2000);
        Off(OUT_AB);
        turnRightWithCompass(IN_4, 50);
        OnFwdSync(OUT_AB, 50, (-1));
        Wait(2500);
        Off(OUT_AB);
      }
      */ 
      if (abs(frontUltraReading - backUltraReading) > 1) {
        if (frontUltraReading < backUltraReading) {
          OnFwd(OUT_A, 50);
          Wait(100);
          Off(OUT_A);
        } else {
          OnFwd(OUT_B, 50);
          Wait(100);
          Off(OUT_B);
        }
      } else {
        if ((frontUltraReading < 20) && (backUltraReading < 20)) {
          OnFwdSync(OUT_AB, 50, (-5));
          Wait(1000);
          Off(OUT_AB);
        } else {
          OnFwdSync(OUT_AB, 50, (-1));
          Wait(1000);
          Off(OUT_AB);
        }
      }
    }
  }
}
